name: Meltano Pipeline

on:
  pull_request:
    types: [opened, reopened, labeled, synchronize]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: Meltano Environment
        required: true
        default: prod
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
  schedule:
    - cron: "0 12 * * *" # Once a day around 6am CST (12am UTC)

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  MELTANO_DATABASE_URI: ${{ secrets.MELTANO_DATABASE_URI }}
  MELTANO_CLI_LOG_CONFIG: logging/ci.yaml
  MELTANO_ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
  BQ_PROJECT_ID: ${{ secrets.BQ_PROJECT_ID }}
  BQ_LOCATION: ${{ secrets.BQ_LOCATION }}

jobs:
  meltano-install:
    name: Install Meltano
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2

      - name: Setup Google Credentials
        env:
          CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: echo "${CREDENTIALS}" | base64 --decode > .secrets/credentials.json

      - name: Install Meltano
        env:
          PIP_CONSTRAINT: .github/workflows/constraints.txt
        run: |
          pipx install meltano
          meltano --version

      - name: Install Plugins
        run: |
          meltano install

      - name: Zip Meltano System Directory
        run: |
          zip -r meltano.zip .meltano

      - name: Upload Meltano System Directory
        uses: actions/upload-artifact@v3.1.2
        with:
          name: meltano-system
          path: meltano.zip

  meltano-run:
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'  || contains(github.event.pull_request.labels.*.name, 'Test/ELTP') }}
    name: "Meltano Job: ${{ matrix.job }}"
    runs-on: ubuntu-latest
    env:
      TAP_GETPOCKET_CONSUMER_KEY: ${{ secrets.TAP_GETPOCKET_CONSUMER_KEY }}
      TAP_GETPOCKET_ACCESS_TOKEN: ${{ secrets.TAP_GETPOCKET_ACCESS_TOKEN }}
      TAP_READTHEDOCS_TOKEN: ${{ secrets.TAP_READTHEDOCS_TOKEN }}
      TAP_STACKEXCHANGE_KEY: ${{ secrets.TAP_STACKEXCHANGE_KEY }}
    strategy:
      matrix:
        include:
          - { job: "pocket-to-bq" }
          - { job: "stackoverflow-to-bq" }
          - { job: "rtd-to-bq" }
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2

      - name: Download Meltano System Directory
        uses: actions/download-artifact@v3.0.2
        with:
          name: meltano-system
          path: meltano.zip

      - name: Unzip Meltano System Directory
        run: |
          unzip meltano.zip

      - name: Setup Google Credentials
        env:
          CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: echo "${CREDENTIALS}" | base64 --decode > .secrets/credentials.json

      - name: Install Meltano
        env:
          PIP_CONSTRAINT: .github/workflows/constraints.txt
        run: |
          pipx install meltano
          meltano --version

      - name: Run
        run: |
          meltano run ${{ matrix.job }}

      - name: Rename metrics log
        run: |
          mv logs/singer_metrics.log logs/singer_metrics_${{ matrix.job }}.log

      - name: Upload metrics log
        uses: actions/upload-artifact@v3.1.2
        with:
          name: singer-metrics
          path: logs/singer_metrics_${{ matrix.job }}.log

  lint:
    name: Lint models
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2

      - name: Download Meltano System Directory
        uses: actions/download-artifact@v3.0.2
        with:
          name: meltano-system
          path: meltano.zip

      - name: Unzip Meltano System Directory
        run: |
          unzip meltano.zip

      - name: Setup Google Credentials
        env:
          CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: echo "${CREDENTIALS}" | base64 --decode > .secrets/credentials.json

      - name: Install Meltano
        env:
          PIP_CONSTRAINT: .github/workflows/constraints.txt
        run: |
          pipx install meltano
          meltano --version

      - name: Lint
        env:
          MELTANO_CLI_LOG_LEVEL: info
        run: |
          meltano invoke sqlfluff:lint --format github-annotation-native -v transform/models

  transform:
    name: Data Transformation with dbt-bigquery
    runs-on: ubuntu-latest
    needs: [meltano-run, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2

      - name: Download Meltano System Directory
        uses: actions/download-artifact@v3.0.2
        with:
          name: meltano-system
          path: meltano.zip

      - name: Unzip Meltano System Directory
        run: |
          unzip meltano.zip

      - name: Setup Google Credentials
        env:
          CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: echo "${CREDENTIALS}" | base64 --decode > .secrets/credentials.json

      - name: Install Meltano
        env:
          PIP_CONSTRAINT: .github/workflows/constraints.txt
        run: |
          pipx install meltano
          meltano --version

      - name: Transform
        run: |
          meltano run dbt-bigquery:run

      - name: Test Data
        run: |
          meltano test dbt-bigquery

  build-evidence:
    name: Build Evidence site locally
    needs: [transform]
    runs-on: ubuntu-latest
    env:
      EVIDENCE_SETTINGS_BIGQUERY_PROJECT_ID: ${{ secrets.BQ_PROJECT_ID }}
      EVIDENCE_SETTINGS_BIGQUERY_CLIENT_EMAIL: ${{ secrets.BQ_CLIENT_EMAIL }}
      EVIDENCE_SETTINGS_BIGQUERY_PRIVATE_KEY: ${{ secrets.BQ_PRIVATE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2

      - name: Download Meltano System Directory
        uses: actions/download-artifact@v3.0.2
        with:
          name: meltano-system
          path: meltano.zip

      - name: Unzip Meltano System Directory
        run: |
          unzip meltano.zip

      - name: Install Meltano
        run: |
          pipx install meltano
          meltano --version

      - name: Build
        run: |
          meltano invoke evidence build --strict

      - name: Upload Evidence build
        uses: actions/upload-artifact@v3.1.2
        with:
          name: evidence-build
          path: evidence/build

  deploy-evidence:
    name: Deploy Evidence site
    needs: [build-evidence]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2

      - name: Set Git config
        run: |
          git config --global --add safe.directory /__w/meltano-dataops/meltano-dataops

      - name: Download Evidence build
        uses: actions/download-artifact@v3.0.2
        with:
          name: evidence-build
          path: evidence/build

      - name: Deploy
        uses: amondnet/vercel-action@v25.1.1
        with:
          github-comment: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.event_name == 'pull_request' && '' || '--prod' }}
