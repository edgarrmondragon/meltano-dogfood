name: Meltano Pipeline

on:
  pull_request:
    types: [opened, reopened, labeled, synchronize]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: Meltano Environment
        required: true
        default: prod
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
  schedule:
    - cron: '0 12 * * *' # Once a day around 6am CST (12am UTC)

env:
  MELTANO_DATABASE_URI: ${{ secrets.MELTANO_DATABASE_URI }}
  MELTANO_ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
  MELTANO_CLI_LOG_LEVEL: ${{ github.event.inputs.logLevel || 'warning' }}
  BQ_PROJECT_ID: ${{ secrets.BQ_PROJECT_ID }}
  BQ_LOCATION: ${{ secrets.BQ_LOCATION }}

jobs:
  meltano-run:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'  || contains(github.event.pull_request.labels.*.name, 'Test/ELTP') }}
    name: "Meltano Job: ${{ matrix.job }}"
    runs-on: ubuntu-latest
    container:
      image: meltano/meltano:latest-python3.9
      env:
        TAP_GETPOCKET_CONSUMER_KEY: ${{ secrets.TAP_GETPOCKET_CONSUMER_KEY }}
        TAP_GETPOCKET_ACCESS_TOKEN: ${{ secrets.TAP_GETPOCKET_ACCESS_TOKEN }}
        TAP_READTHEDOCS_TOKEN: ${{ secrets.TAP_READTHEDOCS_TOKEN }}
        TAP_STACKEXCHANGE_KEY: ${{ secrets.TAP_STACKEXCHANGE_KEY }}
    strategy:
      matrix:
        include:
          - { job: "pocket-to-bq", state-id: tap-getpocket-to-target-bigquery }
          - { job: "stackoverflow-to-bq", state-id: tap-stackexchange-to-target-bigquery }
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.3.0

      - uses: actions/cache@v3
        with:
          key: "cache-${{ env.MELTANO_ENVIRONMENT }}-${{ matrix.state-id }}"
          path: .state/${{ env.MELTANO_ENVIRONMENT}}:${{ matrix.state-id }}/state.json

      - name: Setup Google Credentials
        env:
          CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: echo "${CREDENTIALS}" | base64 --decode > .secrets/credentials.json

      - name: Check Meltano
        run: |
          meltano --version

      - name: Install Plugins
        run: |
          meltano install

      - name: Run
        run: |
          meltano run ${{ matrix.job }}

  lint:
    name: Lint models
    runs-on: ubuntu-latest
    container:
      image: meltano/meltano:latest-python3.9

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.3.0

      - name: Setup Google Credentials
        env:
          CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: echo "${CREDENTIALS}" | base64 --decode > .secrets/credentials.json

      - name: Check Meltano
        run: |
          meltano --version

      - name: Install SQLFluff
        run: |
          meltano install utility sqlfluff

      - name: Lint
        env:
          MELTANO_CLI_LOG_LEVEL: info
        run: |
          meltano invoke sqlfluff:lint --format github-annotation-native -v transform/models

  transform:
    name: Data Transformation with dbt-bigquery
    runs-on: ubuntu-latest
    needs: [meltano-run, lint]
    container:
      image: meltano/meltano:latest-python3.9

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.3.0

      - name: Setup Google Credentials
        env:
          CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: echo "${CREDENTIALS}" | base64 --decode > .secrets/credentials.json

      - name: Check Meltano
        run: |
          meltano --version

      - name: Install dbt-bigquery
        run: |
          meltano install transformer dbt-bigquery

      - name: Transform
        run: |
          meltano run dbt-bigquery:run

      - name: Test Data
        run: |
          meltano test dbt-bigquery

  evidence:
    name: Request Vercel Webhook
    needs: [transform]
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    steps:
      - name: POST to Vercel Deploy Hook
        env:
          BUILD_HOOK: ${{ secrets.VERCEL_DEPLOY_HOOK }}
        run: curl -X POST -d {} $BUILD_HOOK
