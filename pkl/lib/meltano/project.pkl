module com.meltano.Project

import "plugin.pkl"

typealias EnvVars = Mapping<String, String>

class Plugins {
  extractors: List<plugin.Plugin>?
  loaders: List<plugin.Plugin>?
  transformers: List<plugin.Plugin>?
  utilities: List<plugin.Plugin>?
}

class FeatureFlags {
  strict_env_var_mode: Boolean?
  plugin_locks_required: Boolean?
}

class VirtualEnvironments {
  backend: "virtualenv" | "uv"
}

class CommandLine {
  log_level: String?
  log_config: String?
}

class MeltanoEnvironment {
  // TODO: Richer type for the config key
  name: String
  config: Mapping<String, Any>?
  env: EnvVars?
}

class Job {
  name: String
  tasks: List<String>
}

class Schedule {
  name: String
  interval: String
  job: String
}

class AzureStateBackend {
  connection_string: String
  storage_account_url: String
}

class S3StateBackend {
  aws_access_key_id: String
  aws_secret_access_key: String
  endpoint_url: String
}

class GCSStateBackend {
  application_credentials: String
}

class StateBackendConfig {
  uri: String?
  lock_timeout_seconds: Int?
  lock_retry_seconds: Int?
  azure: AzureStateBackend?
  s3: S3StateBackend?
  gcs: GCSStateBackend?
}

class SnowplowConfig {
  collector_endpoints: List<String>
}

class MeltanoProject {
  version: Int?
  default_environment: String
  send_anonymous_usage_stats: Boolean?
  disable_tracking: Boolean?
  project_id: String?
  database_max_retries: Int?
  database_retry_timeout: Int?
  project_readonly: Boolean?
  requires_meltano: String?
  hub_api_root: String?
  hub_url: String?
  hub_url_auth: String?
  elt_buffer_size: Int?
  python: String?
  auto_install: Boolean?
  state_backend: StateBackendConfig?
  cli: CommandLine?
  snowplow: SnowplowConfig?
  venv: VirtualEnvironments?
  experimental: Boolean?
  ff: FeatureFlags?
  env: EnvVars?
  plugins: Plugins
  environments: List<MeltanoEnvironment>?
  jobs: List<Job>?
  schedules: List<Schedule>?
}
